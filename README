Kaveh
=====
Kaveh is a lightweight static site generator written in pure POSIX shell. It converts 
Markdown files into beautiful, responsive HTML pages with zero external dependencies.

Features
--------
- Pure POSIX shell (no external parsers needed)
- Complete Markdown support with extensions
- Automatic heading anchors with permalink icons
- Footnotes with auto-linking
- Syntax-highlighted code blocks
- Tables, lists, and task lists
- Built-in responsive dark mode
- Minified CSS output
- SEO-friendly semantic HTML

Requirements
------------
Only standard POSIX utilities (sh, sed, awk, find, cp).
No external dependencies or parsers required.

Installation
------------
Copy the script to your $PATH directory (if necessary as root):

    cp kaveh /usr/local/bin/
    chmod +x /usr/local/bin/kaveh

Usage
-----
    kaveh
    kaveh -i [INPUT] -o [OUTPUT]
    kaveh -v

If you don't specify directories, these are the defaults:
     [INPUT]  == $PWD/.src
    [OUTPUT]  == $PWD

Markdown Metadata
-----------------
Add metadata at the top of your .md files using HTML comments:

    <!---
    title: My Page Title
    icon: /favicon.png
    description: A brief description
    --->

All fields are optional and will use defaults if not specified.

List Pagination
---------------
Automatically generate paginated lists of files using a clean YAML-like syntax:

    <!---list
    pattern: blog/*.md
    per_page: 10
    --->

This creates a list of all files matching `blog/*.md`, showing 10 posts per page.

Syntax:

    <!---list
    pattern: <glob_pattern>
    per_page: <number>          (optional, default: unlimited)
    custom_dir: <dirname>       (optional, default: based on filename)
    icon: <auto|true|false>     (optional, default: auto)
    date: <auto|true|false>     (optional, default: auto)
    display_next: <text>        (optional, default: "Next →")
    display_prev: <text>        (optional, default: "← Previous")
    --->

Parameters:

  pattern        Shell-style glob pattern to match files (required)
  per_page       Number of items per page. Omit for unlimited (no pagination)
  custom_dir     Custom directory name for pagination files
  
  icon           Control icon display:
                 - auto (default): Show icons for non-markdown files only
                 - true: Show icons for all files
                 - false: Hide icons for all files
  
  date           Control date/time display:
                 - auto (default): Show date for non-markdown files only
                 - true: Show date for all files (including markdown)
                 - false: Hide date for all files
  
  display_next   Custom text for "Next" pagination button
  display_prev   Custom text for "Previous" pagination button

Examples:

Basic list (no pagination):

    <!---list
    pattern: blog/*.md
    --->

Paginated list:

    <!---list
    pattern: blog/*.md
    per_page: 5
    --->

Custom pagination directory:

    <!---list
    pattern: blog/*.md
    per_page: 10
    custom_dir: posts
    --->

Hide icons and dates for all files:

    <!---list
    pattern: downloads/*.pdf
    per_page: 10
    icon: false
    date: false
    --->

Show icons and dates for all files (including markdown):

    <!---list
    pattern: blog/*.md
    per_page: 5
    icon: true
    date: true
    --->

Custom pagination button text:

    <!---list
    pattern: blog/*.md
    per_page: 5
    display_next: "Older posts"
    display_prev: "Newer posts"
    --->

Glob patterns:

    <!---list
    pattern: blog/2023-*.md
    per_page: 5
    --->
    Matches files from 2023

    <!---list
    pattern: **/draft-*.md
    per_page: 5
    --->
    Matches draft files in any subdirectory

Non-markdown files:

    <!---list
    pattern: downloads/*.pdf
    per_page: 10
    --->
    Lists PDF documents with sizes and dates

Multiple Lists:

You can have multiple lists in the same file. Each list gets its own ID.
In your markdown file:

    # My Blog
    
    ## Latest Posts
    <!---list
    pattern: blog/*.md
    per_page: 2
    --->
    
    ## Tutorial Archive
    <!---list
    pattern: tutorials/*.md
    per_page: 5
    --->

Pagination files are generated in dedicated directories:
  Source:       blog-example.md
  Output:       blog-example.html (main page)
  Pagination:   blog-example/1_2.html, blog-example/2_1.html, etc.

Custom directory names per list:

    <!---list
    pattern: blog/*.md
    per_page: 5
    custom_dir: posts
    --->
    
  Output: posts/1_2.html, posts/2_1.html, etc.

Each list can have its own custom directory:

    ## Latest Posts
    <!---list
    pattern: blog/*.md
    per_page: 5
    custom_dir: posts
    --->
    
    ## Tutorials  
    <!---list
    pattern: tutorials/*.md
    per_page: 10
    custom_dir: guides
    --->

This generates:
  posts/1_1.html, posts/1_2.html (for blog posts)
  guides/2_1.html, guides/2_2.html (for tutorials)

Pagination filename format: {list_number}_{page_number}.html
  List 1, Page 2: 1_2.html
  List 2, Page 3: 2_3.html

File Types:

Lists work with any file type, not just markdown.

Markdown files (.md):
  - Title: From metadata or generated from filename
  - Description: From metadata
  - Date: Extracted from filename (YYYY-MM-DD pattern)
  - URL: Converts .md to .html

Other files (.pdf, .jpg, .zip, .gpg, etc.):
  - Title: Actual filename (with extension)
  - Description: File size with minimal file type icon
  - Date: Last modified time (shown in <time> element)
  - URL: Direct link to the file

Non-markdown file listings show:
  - Minimal SVG icon representing file type (document, image, video, archive, etc.)
  - Human-readable file size with exact byte count (e.g., "2.3 MB (2,415,919 bytes)")
  - Last modified timestamp in <time> element

Examples:

    <!---list
    pattern: downloads/*.pdf
    per_page: 10
    --->
    Lists PDF documents with sizes and dates

    <!---list
    pattern: gallery/**/*.jpg
    per_page: 20
    --->
    Lists images from all subdirectories

    <!---list
    pattern: media/*.mp4
    per_page: 8
    --->
    Lists video files with metadata

    <!---list
    pattern: keys/*.gpg
    per_page: 5
    --->
    Lists GPG keys with file information

Custom Heading IDs
------------------
Create custom anchor IDs for headings:

    ## My Section {#custom-id}

Headings without custom IDs get auto-generated IDs based on their text.
All headings show a permalink icon on hover.

Footnotes
---------
Add footnotes to your text:

    Text with footnote[^1].
    
    [^1]: Footnote content.

Code Blocks
-----------
Use fenced code blocks with optional language identifiers:

    ```python
    def hello():
        print("Hello!")
    ```

Escaping
--------
Use backslashes to escape Markdown syntax:

    \* not italic \*
    \# not a heading

Directory Structure
-------------------
Recommended project layout:

    myproject/
    ├── kaveh
    ├── src/
    │   ├── index.md
    │   └── images/
    └── out/
        ├── index.html
        └── images/

Non-markdown files (images, CSS, etc.) are automatically copied to output.

Conflict Resolution
-------------------
Kaveh automatically avoids naming conflicts between generated and source files.

File Conflicts:

If a source file has the same name as a generated HTML file:

    .src/index.html    (your file)
    .src/index.md      (generates index_.html instead)

Output:

    out/index.html     (copied from source)
    out/index_.html    (generated from index.md)

If index_.html also exists in source, it becomes index_2.html, and so on.

Directory Conflicts:

Pagination directories follow the same pattern:

    .src/blog-example.md        (list file)
    .src/blog-example/          (your directory)

Output:

    out/blog-example.html       (main page)
    out/blog-example/           (your directory, copied)
    out/blog-example_/          (pagination directory)

If blog-example_/ also conflicts, it becomes blog-example_2/, etc.

With custom directory names:

    <!---list
    pattern: blog/*.md
    per_page: 5
    custom_dir: posts
    --->

Source:
    .src/posts/                 (your directory)

Output:
    out/posts/                  (your directory, copied)
    out/posts_/                 (pagination directory)

This ensures your source files are never overwritten or skipped.

Automation Examples
-------------------
Build script:

    #!/bin/sh
    kaveh -i /var/doc/mysite -o /var/www/mysite

Watch and rebuild:

    #!/bin/sh
    while inotifywait -r -e modify src/; do
        kaveh -i src -o out
    done

Deploy after build:

    #!/bin/sh
    kaveh -i src -o out
    rsync -avz --delete out/ user@server:/var/www/html/

Customization
-------------
The HTML template is embedded in the script after the __HTML TEMPLATE__ marker.
You can edit CSS, HTML structure, and default values directly in the script.

Default values at the top of the script:

    KVH_PAGE_NAME="Kaveh"
    KVH_PAGE_ICON="/logo.png"
    KVH_PAGE_DESC="Your default description"

License
-------
MIT License - Copyright (C) 2021-2025 Mahdi Mirzadeh <mahdi@mirzadeh.pro>
